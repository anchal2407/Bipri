# -*- coding: utf-8 -*-
"""AI group project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D-HGbOxAkJizG2jqPcjUDJrgr33l-7E5
"""

import os

import numpy as np

import pandas as pd

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

df = pd.read_csv("BTC-USD.csv")
df.head()

training_data = df.iloc[:,1:2].values
print(training_data)
print(training_data.shape)

!pip  install scikit-learn

from sklearn.preprocessing import MinMaxScaler

scalar = MinMaxScaler(feature_range= (0,1))
scaled_training_set = scalar.fit_transform(training_data)

scaled_training_set

X_train=[]
Y_train=[]
for i in range(60,1258):
  X_train.append(scaled_training_set[i-60:i,0])
  Y_train.append(scaled_training_set[i,0])
X_train = np.array(X_train)
Y_train = np.array(Y_train)

print(X_train.shape)
print(Y_train.shape)

X_train = np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1))
X_train.shape

!pip install keras

from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import Dropout

regressor = Sequential()
regressor.add(LSTM(units = 50, return_sequences=True,input_shape= (X_train.shape[1],1)))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 50, return_sequences=True))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 50, return_sequences=True))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))

regressor.add(Dense(units=1))

from keras.losses import mean_squared_error

regressor.compile(optimizer= 'adam',loss=mean_squared_error)
regressor.fit(X_train,Y_train,epochs=100,batch_size=32)

df_test=pd.read_csv("/content/BTC-USD_test.csv")
actual_stock_price = df.iloc[:,1:2].values

df_total = pd.concat((df['Open'], df_test['Open']), axis=0)
inputs = df_total[len(df_total) - len(df_test) - 60:].values

# Reshape inputs
inputs = inputs.reshape(-1, 1)

# Scale the inputs
inputs = scalar.transform(inputs)

X_test = []
for i in range(60, 80):
    X_test.append(inputs[i - 60:i, 0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = scalar.inverse_transform(predicted_stock_price)

plt.plot(actual_stock_price,color='green',label='Actual BTC_USD stock price')
plt.plot(predicted_stock_price,color='red',label='Predicted BTC_USD stock price')
plt.title('BTC_USD STOCK PREDICTION')
plt.xlabel('Time')
plt.ylabel('BTC_USD stock price')
plt.legend()

# Simulate trades based on predictions
def backtest(X_test, predicted_prices, actual_prices):
    initial_cash = 10000  # Initial investment amount
    cash = initial_cash
    bitcoin_units = 0

    for i in range(len(predicted_prices)):
        # Buy if predicted price increases
        if predicted_prices[i] > predicted_prices[i - 1]:
            bitcoin_units_to_buy = cash / actual_prices[i]  # Buy with all available cash
            bitcoin_units += bitcoin_units_to_buy
            cash = 0
        # Sell if predicted price decreases
        elif predicted_prices[i] < predicted_prices[i - 1]:
            cash += bitcoin_units * actual_prices[i]  # Sell all bitcoin units
            bitcoin_units = 0

    final_value = cash + bitcoin_units * actual_prices[-1]
    profit_loss = final_value - initial_cash
    return profit_loss

# Perform backtesting
profit_loss = backtest(X_test, predicted_stock_price.flatten(), actual_stock_price.flatten())

print("Profit/Loss from Backtesting:", profit_loss)

import requests

# Define API endpoints and authentication credentials
API_BASE_URL = "https://www.binance.com/en/my/settings/api-management"
API_KEY = "your_api_key"
API_SECRET = "your_api_secret"

def place_order(symbol, quantity, side, order_type="MARKET"):
    headers = {
        "X-MBX-APIKEY": API_KEY,
    }
    params = {
        "symbol": symbol,
        "quantity": quantity,
        "side": side,
        "type": order_type,
    }
    response = requests.post(f"{API_BASE_URL}/order", params=params, headers=headers)

    # Print the response text
    print("Response text:", response.text)

# Example usage: Place a buy order for 1 BTC
place_order("BTCUSDT", 1, "BUY")

